
/**
Associates unique filenames with file paths on the system. Performs 
    directory scans and polls. Persists path associations and modification 
    timestamps of intermediate directories to prevent unnecessary rescans.
@name FileCache
@module
*/
/**
Set configuration options.
@name FileCache.configure
@param {FileCache.configuration} newConf
*/
/**
@name FileCache.configuration
@class
*/
config = {
    /**
    @name FileCache.configuration#dbPath
    @property {string} Local or absolute filepath at which the path cache 
        database is stored. If multiple application servers are used, they 
        should share as few databases as possible - WARNING: sqlite3 and 
        NFS don't get along.
    @default "./FileCache.sqlite.db"
    */
    dbPath:             "./FileCache.sqlite.db",
    /**
    @name FileCache.configuration#mountPoints
    @property {Array.<string>} Local or absolute filepath(s) within which 
        directories and files are to be indexed. The indexed filesystem is 
        a union of these directories.
    */
    mountPoints:        []
};

/**
Access or create the chosen sqlite database file. Begin any necessary 
    rescans.
@name FileCache.start
@function
@param {function} callback No arguments.
*/
var start = function (callback) {
    
};

/**
Add a directory expected to be found in one of the 
    {@link FileCache.configuration#mountpoints|configured mountpoints} as 
    an indexed directory. Recursively scan for valid files. Cache file
    path associations and directory modification timestamps. Hit the 
    callback when existence of the target directory is confirmed (or not).
@name FileCache.indexDirectory
@function
@param {string} dir
@param {function} callback Boolean argument indicates whether directory 
    exists.
*/
var indexDirectory = function (dir, callback) {
    
};

/**
Drop a directory from the index. Cancel all scheduled polls and rescans.
    Eliminate records from the database file.
@name FileCache.dropDirectory
@function
@param {string} dir
*/
var dropDirectory = function (dir) {
    
};

/**
Get the full system path of a file by unique filename.
@name FileCache.getPath
@function
@param {string} filename
@returns {string} Absolute file path.
*/
var getPath = function (filename) {
    
};

/**
Force a rescan of the specified directory. Ambiguous directory paths 
    trigger multiple rescans. Trigger a callback when done.
@name FileCache.forceRescan
@function
@param {function} callback No arguments.
*/
var forceRescan = function (callback) {
    
};





module.exports = {
    configure:          configure,
    start:              start,
    indexDirectory:     indexDirectory,
    dropDirectory:      dropDirectory,
    getPath:            getPath,
    forceRescan:        forceRescan
};
